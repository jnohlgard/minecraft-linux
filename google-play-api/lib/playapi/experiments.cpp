#include <playapi/experiments.h>

#include <sstream>
#include <play_common.pb.h>
#include <playapi/util/base64.h>
#include <playapi/util/http.h>

using namespace playapi;

std::set<long long> experiments_list::supported_experiments = {12609897, 12609898, 12609899, 12609900, 12609901, 12610192, 12617884, 12605163, 12605193, 12602328, 12603136, 12602050, 12605524, 12605725, 12602810, 12602812, 12602814, 12602816, 12603704, 12602035, 12603133, 89, 12602358, 12611632, 87, 12602761, 12602049, 12604203, 12606756, 12603961, 12603137, 12602735, 12603102, 742, 12602880, 12602636, 12603110, 12602819, 12602796, 12603108, 12603105, 12606634, 12603097, 12603067, 12603106, 12603098, 12602778, 12602779, 12602780, 12602795, 12604148, 12603117, 12602981, 12603286, 12610657, 12603428, 12604244, 12604245, 12604246, 12603772, 12608143, 12606710, 12603401, 12603109, 12603396, 12603367, 12610437, 12620479, 12612210, 12612626, 12613802, 12603513, 12603385, 12603301, 12603329, 12603516, 12606902, 12606904, 12606908, 12606916, 12606932, 12611365, 12606876, 12608821, 12608822, 12608823, 12608824, 12608825, 12608870, 12609117, 12609118, 12603517, 12603647, 12603707, 12603787, 12603719, 12604322, 12605436, 12613372, 12612541, 12612650, 12612651, 12612652, 12612653, 12612654, 12612667, 12620763, 12603770, 12603948, 12605594, 12605701, 12606771, 12608685, 12609856, 12608873, 12604572, 12604043, 12604266, 12607839, 12604323, 12604230, 12605131, 12605994, 12607638, 12604154, 12607073, 12604300, 12603992, 12604383, 12604224, 12604379, 12604380, 12604381, 12604360, 12605120, 12605124, 12610660, 12622374, 12608255, 12608340, 12608402, 12608403, 12608405, 12608404, 12608406, 12608407, 12617519, 12617520, 12617521, 12617522, 12617523, 12617524, 12605174, 12605175, 12605176, 12605177, 12605178, 12605179, 12605180, 12604072, 12604073, 12604074, 12604075, 12604076, 12604164, 12604165, 12604166, 12604167, 12606496, 12604524, 12605079, 12605080, 12605081, 12605208, 12605209, 12619714, 12605212, 12605213, 12619715, 12605215, 12605419, 12605261, 12609857, 12609858, 12609859, 12605458, 12620853, 12620854, 12620855, 12620856, 12620857, 12605648, 12605417, 12617783, 12619031, 12605418, 12605728, 12605750, 12605765, 12605993, 12606635, 12605956, 12606692, 12606497, 12605975, 12606982, 12608423, 12607000, 12608688, 12609928, 12609861, 12608807, 12606444, 12607353, 12607692, 12606829, 12613101, 12607749, 12608135, 12607225, 12607380, 12607314, 12607338, 12607603, 12607553, 12607818, 12607746, 12613454, 12611545, 12611082, 12611607, 12608225, 12608282, 12608339, 12608271, 12608272, 12608409, 12608410, 12608411, 12608412, 12608413, 12609134, 12608498, 12608826, 12619749, 12608725, 12608795, 12617419, 12611207, 12611459, 12609314, 12609315, 12609316, 12609286, 12609603, 12609656, 12609657, 12609806, 12609807, 12609726, 12609676, 12610177, 12609170, 12610205, 12610438, 12611789, 12612263, 12616872, 12619461, 12610799, 12611069, 12611253, 12611610, 12611038, 12613073, 12611548, 12610420, 12614849, 12619632, 12608887, 12611404, 12611586, 12611636, 12610748, 12614241, 12611058, 12612385, 12617441, 12612611, 12612246, 12613100, 12613099, 12613469, 12614383, 12612198, 12614846, 12611192, 12615220, 12616628, 12616209, 12616251, 12616260, 12616127, 12616321, 12616199, 12616624, 12612366, 12616397, 12617487, 12616420, 12617418, 12616559, 12616560, 12616561, 12616694, 12618334, 12618335, 12618336, 12618337, 12618338, 12619116, 12619166, 12619131, 12618805, 12619085, 12618915, 12618916, 12618917, 12617427, 12617606, 12617436, 12617604, 12617485, 12616313, 12617689, 12617885, 12617782, 12618333, 12618706, 12618749, 12618989, 12618990, 12618942, 12620867, 12622345, 12619065, 12618829, 12619074, 12619183, 12619184, 12619185, 12619186, 12619120, 12619633, 12620349, 12618726, 12620006, 12622573, 12620267, 12617943, 12619925, 12619926, 12619927, 12620008, 12620294, 12620064, 12620120, 12620148, 12619928, 12620121, 12620266, 12619024, 12620061, 12620054, 12619996, 12620495, 12620496, 12617808, 12620811, 12620843, 12620804, 12620805, 12620806, 12622334, 12622452, 12618928, 12622495, 12622545, 12604225, 12604226, 12604227, 12604228, 12604229, 12606611, 12606612, 12606613, 12606614, 12606615, 12606616, 12606617, 12606618, 12606619, 12606620, 12604101, 12611536, 12603123, 12603125, 12603127, 12603128, 12603129, 12603130, 12603642, 12602748, 12604235, 12604236, 12614972, 12603144, 12603145, 12603146, 12603147, 12603148, 12603149, 12603118, 12603119, 12603120, 12603121, 12603122, 12603247, 12603248, 12603249, 12603250, 12603251, 12620351, 12602374, 12604366, 12603408, 12603629, 12604357, 12604382, 12607368, 12606007, 12606677, 12605290, 12616572, 12610569, 12606765, 12608094, 12608854, 12607739, 12610202, 12608625, 12606978, 12608896, 12609510, 12609511, 12609722, 12609522, 12609703, 12610416, 12610417, 12610418, 12610398, 12611376, 12610679, 12610421, 12620435, 12620436, 12620437, 12610211, 12610490, 12610491, 12609980, 12609956, 12611039, 12611040, 12611208, 12611703, 12611622, 12613776, 12613110, 12614201, 12617586, 12617693, 12617696, 12619200, 12620147, 12612655, 12616358, 12619128, 12619556, 12619566, 12619745, 12619746, 12617688, 12618830, 12617924, 12620345, 12608663};

void experiments_list::set_targets(const proto::finsky::response::Targets& experiments) {
    enabled_experiments.clear();
    other_experiments.clear();
    for (long long e : experiments.targetid()) {
        if (supported_experiments.count(e) > 0) {
            enabled_experiments.insert(e);
        } else {
            other_experiments.insert(e);
        }
    }
}

void experiments_list::set_targets(const std::string& experiments) {
    enabled_experiments.clear();
    other_experiments.clear();
    std::stringstream ss(experiments);
    std::string es;
    while (std::getline(ss, es, ',')) {
        long long e = std::stoi(es);
        if (supported_experiments.count(e) > 0) {
            enabled_experiments.insert(e);
        } else {
            other_experiments.insert(e);
        }
    }
}

bool experiments_list::is_enabled(long long experiment) const {
    return (supported_experiments.count(experiment) > 0);
}

void experiments_list::add_headers(http_request& req) {
    if (is_enabled(ENCODED_TARGETS)) {
        proto::finsky::EncodedTargets encoded_targets;
        encoded_targets.set_version(1);
        long long p = 0;
        for (long long e : enabled_experiments) {
            encoded_targets.add_supportedtarget(e - p);
            p = e;
        }
        p = 0;
        for (long long e : other_experiments) {
            encoded_targets.add_othertarget(e - p);
            p = e;
        }
        req.add_header("X-DFE-Encoded-Targets", base64::encode(encoded_targets.SerializeAsString()));
    } else {
        std::stringstream ss;
        bool f = true;
        for (long long e : enabled_experiments) {
            if (f)
                f = false;
            else
                ss << ',';
            ss << e;
        }
        req.add_header("X-DFE-Supported-Targets", ss.str());
        ss.clear();
        f = true;
        for (long long e : other_experiments) {
            if (f)
                f = false;
            else
                ss << ',';
            ss << e;
        }
        req.add_header("X-DFE-Other-Targets", ss.str());
    }
}

std::string experiments_list::get_comma_separated_target_list() const {
    std::stringstream ss;
    std::set<long long> m = enabled_experiments;
    m.insert(other_experiments.begin(), other_experiments.end());
    bool f = true;
    for (long long e : m) {
        if (f)
            f = false;
        else
            ss << ',';
        ss << e;
    }
    return ss.str();
}